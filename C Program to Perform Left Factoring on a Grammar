#include <stdio.h>
#include <string.h>

#define MAX 100


void commonPrefix(char str1[], char str2[], char prefix[]) {
    int i = 0;
    while(str1[i] && str2[i] && str1[i] == str2[i]) {
        prefix[i] = str1[i];
        i++;
    }
    prefix[i] = '\0';
}

int main() {
    char nt;
    char productions[MAX];
    char *prod[10];
    int count = 0, i, j;

    printf("Enter the non-terminal (e.g. A): ");
    scanf(" %c", &nt);

    printf("Enter the production rules for %c (separated by |):\n", nt);
    scanf(" %[^\n]", productions);

   
    prod[count] = strtok(productions, "|");
    while(prod[count] != NULL) {
        count++;
        prod[count] = strtok(NULL, "|");
    }

   
    char prefix[MAX];
    strcpy(prefix, prod[0]);

    for(i = 1; i < count; i++) {
        char temp[MAX];
        commonPrefix(prefix, prod[i], temp);
        strcpy(prefix, temp);
        if (strlen(prefix) == 0)
            break;
    }

    if(strlen(prefix) == 0) {
        printf("No common prefix found. Left factoring not possible.\n");
        return 0;
    }

    printf("\nAfter left factoring:\n");
    printf("%c -> %s%c'\n", nt, prefix, nt);
    printf("%c' -> ", nt);

    int prefix_len = strlen(prefix);
    for(i = 0; i < count; i++) {
        if(strlen(prod[i]) == prefix_len) {
            // If production equals prefix, replace with epsilon
            printf("Îµ");
        } else {
            // Print suffix after prefix
            printf("%s", prod[i] + prefix_len);
        }
        if(i != count - 1) printf(" | ");
    }
    printf("\n");

    return 0;
}
